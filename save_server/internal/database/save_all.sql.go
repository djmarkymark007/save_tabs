// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: save_all.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getAllBrowserStates = `-- name: GetAllBrowserStates :many
SELECT id, created_at, titles, urls FROM save_all_tabs
`

func (q *Queries) GetAllBrowserStates(ctx context.Context) ([]SaveAllTab, error) {
	rows, err := q.db.QueryContext(ctx, getAllBrowserStates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SaveAllTab
	for rows.Next() {
		var i SaveAllTab
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			pq.Array(&i.Titles),
			pq.Array(&i.Urls),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrowserStatesByIndex = `-- name: GetBrowserStatesByIndex :many
SELECT id, created_at, titles, urls FROM save_all_tabs
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetBrowserStatesByIndexParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetBrowserStatesByIndex(ctx context.Context, arg GetBrowserStatesByIndexParams) ([]SaveAllTab, error) {
	rows, err := q.db.QueryContext(ctx, getBrowserStatesByIndex, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SaveAllTab
	for rows.Next() {
		var i SaveAllTab
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			pq.Array(&i.Titles),
			pq.Array(&i.Urls),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastBrowserState = `-- name: GetLastBrowserState :one
SELECT id, created_at, titles, urls FROM save_all_tabs
ORDER BY created_at DESC 
LIMIT 1
`

func (q *Queries) GetLastBrowserState(ctx context.Context) (SaveAllTab, error) {
	row := q.db.QueryRowContext(ctx, getLastBrowserState)
	var i SaveAllTab
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		pq.Array(&i.Titles),
		pq.Array(&i.Urls),
	)
	return i, err
}

const saveBrowserState = `-- name: SaveBrowserState :one
INSERT INTO save_all_tabs (id, created_at, titles, urls)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, titles, urls
`

type SaveBrowserStateParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	Titles    []string
	Urls      []string
}

func (q *Queries) SaveBrowserState(ctx context.Context, arg SaveBrowserStateParams) (SaveAllTab, error) {
	row := q.db.QueryRowContext(ctx, saveBrowserState,
		arg.ID,
		arg.CreatedAt,
		pq.Array(arg.Titles),
		pq.Array(arg.Urls),
	)
	var i SaveAllTab
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		pq.Array(&i.Titles),
		pq.Array(&i.Urls),
	)
	return i, err
}
